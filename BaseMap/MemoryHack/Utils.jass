library Utils requires Memory, Version, ObjectData

function ConvertHandle takes handle h returns integer
    return HandleTable[GetHandleId(h)*3]
endfunction

function GetStringAddress takes string s returns integer
    return Memory[Memory[Memory[StringHandles]/4+SH2I(s)*4+2]/4+7]
endfunction

function DecodeTags takes integer a, integer b returns integer
    local integer i = Memory[TagTable]/4
    if a < 0 then
        set i = i+8
        set a = a-0x80000000
    endif
    if a < Memory[i+7] then
        set i = Memory[i+3]/4+a*2
        if Memory[i] == 0xFFFFFFFE then
            set i = Memory[i+1]/4
            if Memory[i+6] == b then
                return i
            endif
        endif
    endif
    return 0
endfunction

function GetAgentFromRef takes integer ref returns integer
    local integer i = Memory[ref+1]
    set ref = Memory[ref]
    if ref !=0xFFFFFFFF and i !=0xFFFFFFFF then
        set i = DecodeTags(ref, i)
        if i != 0 and Memory[i+8] == 0 then
            return Memory[i+21]
        endif
    endif
    return 0
endfunction


function GetUnitAbility takes unit u, integer id returns integer
    local integer i = GetAgentFromRef(ConvertHandle(u)/4+119)
    loop
        exitwhen i == 0 or Memory[i/4+13] == id
        set i = GetAgentFromRef(i/4+9)
    endloop
    return i
endfunction

function GetUnitFlags takes unit u returns integer
    return Memory[ConvertHandle(u)/4+23]
endfunction

function IsUnitStunned takes unit u returns boolean
    return Memory[ConvertHandle(u)/4+102] > 0
endfunction

function GetAgentType takes agent a returns integer
    return Memory1[Memory[Memory[ConvertHandle(a)/4]/4+7]/4]
endfunction

function GetUnitArmor takes unit u returns real
    return RMemory[ConvertHandle(u)/4+56]
endfunction

function GetHeroPrimaryAttribute takes unit u returns integer
    return Memory[Memory[ConvertHandle(u)/4+124]/4+51]
endfunction

function GetAbilityMaxLevel takes integer abil returns integer
    return Memory[GetObjectData(ABILITY_OBJECT_DATA, abil)+20]
endfunction

function GetAbilityManaCost takes integer abil, integer level returns integer
    return Memory[Memory[GetObjectData(ABILITY_OBJECT_DATA, abil)+21]/4-22+level*26]
endfunction

function GetAbilityCooldown takes integer abil, integer level returns real
    return RMemory[Memory[GetObjectData(ABILITY_OBJECT_DATA, abil)+21]/4-21+level*26]
endfunction

function GetAbilityCurrentCooldown takes integer address returns real
    local integer pData = Memory[address/4+55]/4
    if pData != 0 then
        return RMemory[pData+1] - RMemory[Memory[pData+3]/4+16]
    endif
    return .0
endfunction

endlibrary